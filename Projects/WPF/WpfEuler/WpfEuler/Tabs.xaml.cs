using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace WpfEuler
{
    /// <summary>
    /// Interaction logic for Tabs.xaml
    /// </summary>
    public partial class Tabs : Window
    {
        public Tabs()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }

        private void tabControl1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
        /// The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button1_Click(object sender, RoutedEventArgs e)
        {
            int sum = 0;

            for (int i = 0; i < 1000; i++)
            {
                if ((i % 3 == 0) || (i % 5 == 0))
                {
                    textBox2.Text += string.Format("{0}, ", i);
                    sum += i;
                }
            }
            textBox1.Text = sum.ToString();

        }

        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        /// By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
        /// find the sum of the even-valued terms.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button2_Click(object sender, RoutedEventArgs e)
        {
            long n = 0;
            long next = 0;
            long sum = 0;
            long max = 4000000;
            long fibonacci = 0;
            Fibonacci(ref n, ref next, ref sum, ref max);
            fibonacci = n;
            textBox3.Text = string.Format("fibonacci = {0} sum = {1}", next, sum);

        }

        private void Fibonacci(ref long current, ref long next, ref long sum, ref long max)
        {
            if (current == 0)
            {
                next = 1;
                current = 1;
                Fibonacci(ref current, ref next, ref sum, ref max);
            }
            else if (current + next < max)
            {
                long temp = current + next;
                current = next;
                next = temp;
                textBox4.Text += string.Format("[{0}, {1}]", current, next);
                if (current % 2 == 0)
                    sum += current;
                Fibonacci(ref current, ref next, ref sum, ref max);
            }
            else
            {
                if (next % 2 == 0) // process last one
                    sum += next;
            }
        }

        /// <summary>
        /// The prime factors of 13195 are 5, 7, 13 and 29.
        /// What is the largest prime factor of the number 600851475143 ?
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button3_Click(object sender, RoutedEventArgs e)
        {
            double largestPrime = 0;
            double squareRoot = Math.Sqrt(600851475143D);
            double half = 600851475143D / 2;
            double reduced = 600851475143D;

            for (double i = 2; i < Math.Round(half); i++)
            {
                if (reduced % i == 0)
                {
                    largestPrime = i;
                    textBox6.Text += string.Format("{0}, ", i);
                    reduced = reduced / i;
                    while (reduced % i == 0)
                    {
                        textBox6.Text += string.Format("{0}, ", i);
                        reduced = reduced / i;
                    }
                }
            }
            if (reduced > 0)
            {
                largestPrime = reduced;
                textBox6.Text += string.Format("{0}, ", largestPrime);
            }

            textBox5.Text = string.Format("{0:0,0}", largestPrime);
        }

        /// <summary>
        /// A palindromic number reads the same both ways. 
        /// The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.
        /// Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button4_Click(object sender, RoutedEventArgs e)
        {
            int factor1 = 0;
            int factor2 = 0;
            int multiplican = 0;
            int largestPalandrome = 0;

            for (factor1 = 1; factor1 < 1000; factor1++)
            {
                for (factor2 = 1; factor2 < 1000; factor2++)
                {
                    multiplican = factor1 * factor2;
                    if (IsPalindrome(multiplican))
                    {
                        if (multiplican > largestPalandrome)
                            largestPalandrome = multiplican;
                        textBox8.Text += string.Format("{0}*{1}={2}, ", factor1, factor2, multiplican);
                    }
                }

            }
            textBox7.Text += string.Format("largest = {0} ", largestPalandrome);

        }

        private bool IsPalindrome(int factor)
        {
            string str1 = factor.ToString();
            string str2 = new string(factor.ToString().ToCharArray().Reverse().ToArray());

            if (String.Equals(str1, str2))
                return true;
            else
                return false;

        }

        /// <summary>
        /// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        /// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button5_Click(object sender, RoutedEventArgs e)
        {
            long factor1 = 0;
            long factor2 = 0;
            bool foundAll = true;
            double smallest = 0;
            long loopIndex = 1000000000;
         //   long loopIndex = 100000000000;
            //     long loopIndex = 1;
            string answers = "";
            string longestAnswer = "";



     //       smallest = 1;
     //       for (int i = 1; i < 21; i++)
     //           smallest = smallest * i;
     ////       smallest = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20;
     //       textBox10.Text = smallest.ToString();




            for (factor1 = 1; factor1 < loopIndex; factor1++)
            {
                answers = "";
                foundAll = true;
                for (factor2 = 1; factor2 < 20; factor2++)
                {
                    if (factor1 % factor2 != 0)
                    {
                        foundAll = false;
                        break;
                    }
                    else
                    {
                        // answers += string.Format("{0}/{1}={2}, ", factor1, factor2, factor1 / factor2);
                        answers += string.Format("{0}/{1}={2}, ", factor1, factor2, factor1 / factor2);
                        if (answers.Length > longestAnswer.Length)
                            longestAnswer = answers;
                    }
                }
                if (foundAll)
                {
                    smallest = factor1;
                    break;
                }
            }
            if (foundAll)
            {
                textBox9.Text = string.Format("smallest = {0} ", smallest);
                textBox10.Text = "";
                for (int i = 1; i < 11; i++)
                    textBox10.Text += string.Format("{0}/{1}={2}, ", smallest, i, smallest / i);
            }
            else
            {
                textBox9.Text = "not found!";
                textBox10.Text = answers;
            }
        }

        /// <summary>
        /// What is the difference between the sum of the squares and the square of the sums?
        /// 


//The sum of the squares of the first ten natural numbers is,
 
//12 + 22 + ... + 102 = 385
 
//The square of the sum of the first ten natural numbers is,
 
//(1 + 2 + ... + 10)2 = 552 = 3025
 
//Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 385 = 2640.
 
//Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button6_Click(object sender, RoutedEventArgs e)
        {
            double sumOfSquares = 0;
            double sum = 0;


            for (double i = 1; i < 101; i++)
            {
                sumOfSquares += i * i;
                sum += i;
                textBox12.Text += string.Format("Square = {0}*{0}={1}, ", i, i, i * i);
                textBox12.Text += string.Format("sumOfSquares = {0}, ", sumOfSquares);
                textBox12.Text += string.Format("i = {0}, ", i);
                textBox12.Text += string.Format("sum = {0}, ", sum);


            }
            textBox11.Text = string.Format("difference = {0}", (sum * sum) - sumOfSquares);

        }

        /// <summary>
        /// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
        /// What is the 10 001st prime number? 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button7_Click(object sender, RoutedEventArgs e)
        {
            double finalPrime = 0D;
            double primeCandidate = 2D;
            double currentPrimePosition = 1D;
            double finalPrimePosition = 10001D;

            while (currentPrimePosition < finalPrimePosition)
            {
                primeCandidate += 1;
                if (IsPrime(primeCandidate))
                {
                    currentPrimePosition++;
                    if (currentPrimePosition > 5000)
                    textBox14.Text += string.Format("{0},{1} ", currentPrimePosition, primeCandidate);

                    if (currentPrimePosition == finalPrimePosition)
                    {
                        finalPrime = primeCandidate;
                    }
                }
            }
            textBox13.Text = string.Format("10 001st prime number = {0}", finalPrime);

        }

        private bool IsPrime(double primeCandidate)
        {
            bool retValue = true;

            for (double i = 2; i < primeCandidate; i++)
            {
                if (primeCandidate % i == 0)
                {
                    retValue = false;
                    break;
                }
            }

            return retValue;

        }

        /// <summary>
        /// Find the greatest product of five consecutive digits in the 1000-digit number.
 
//73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450


        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button8_Click(object sender, RoutedEventArgs e)
        {
            int largestSequence = 99999;
            string numberString = getString();
            double currentFactor = 0;
            double largestFactor = 0;
            string largestFactorString;

            while (largestSequence > 1)
            {
                largestFactorString = string.Format("{0:00000}", largestSequence);
                if (numberString.Contains(largestFactorString))
                {
                    currentFactor = GetLargestFactor(largestFactorString);
                    if (currentFactor > largestFactor)
                    {
                        largestFactor = currentFactor;
                        textBox16.Text = string.Format("largestFactorString={0}, largestFactor={1}", largestFactorString, largestFactor);

                        //    break;
                    }
                }

                largestSequence--;
            }
            textBox15.Text = largestFactor.ToString();
        }

        private double GetLargestFactor(string LargestSequence)
        {
            double largestFactor = 0D;

            int factor1 = Convert.ToInt32(LargestSequence.Substring(0, 1));
            int factor2 = Convert.ToInt32(LargestSequence.Substring(1, 1));
            int factor3 = Convert.ToInt32(LargestSequence.Substring(2, 1));
            int factor4 = Convert.ToInt32(LargestSequence.Substring(3, 1));
            int factor5 = Convert.ToInt32(LargestSequence.Substring(4, 1));

            largestFactor = factor1 * factor2 * factor3 * factor4 * factor5;

            return largestFactor;
        }

        private string getString()
        {

            StringBuilder sb = new StringBuilder();

            sb.Append("73167176531330624919225119674426574742355349194934");
            sb.Append("96983520312774506326239578318016984801869478851843");
            sb.Append("85861560789112949495459501737958331952853208805511");
            sb.Append("12540698747158523863050715693290963295227443043557");
            sb.Append("66896648950445244523161731856403098711121722383113");
            sb.Append("62229893423380308135336276614282806444486645238749");
            sb.Append("30358907296290491560440772390713810515859307960866");
            sb.Append("70172427121883998797908792274921901699720888093776");
            sb.Append("65727333001053367881220235421809751254540594752243");
            sb.Append("52584907711670556013604839586446706324415722155397");
            sb.Append("53697817977846174064955149290862569321978468622482");
            sb.Append("83972241375657056057490261407972968652414535100474");
            sb.Append("82166370484403199890008895243450658541227588666881");
            sb.Append("16427171479924442928230863465674813919123162824586");
            sb.Append("17866458359124566529476545682848912883142607690042");
            sb.Append("24219022671055626321111109370544217506941658960408");
            sb.Append("07198403850962455444362981230987879927244284909188");
            sb.Append("84580156166097919133875499200524063689912560717606");
            sb.Append("05886116467109405077541002256983155200055935729725");
            sb.Append("71636269561882670428252483600823257530420752963450");

            return sb.ToString();

        }
        /// <summary>
        /// A Pythagorean triplet is a set of three natural numbers, a b c, for which,
        /// 
        /// a2 + b2 = c2
        /// 
        /// For example, 32 + 42 = 9 + 16 = 25 = 52.
        /// 
        /// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        /// Find the product abc.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button9_Click(object sender, RoutedEventArgs e)
        {

        }

    }
}
